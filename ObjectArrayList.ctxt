#BlueJ class context
comment0.target=ObjectArrayList
comment0.text=\r\n\ Stores\ {@link\ Object}\ items\ in\ an\ array\ list\ which\ is\ more\ efficent\ in\ \r\n\ adding\ at\ the\ cost\ of\ more\ storage.\ Note\ that\ the\ internal\ representation\r\n\ does\ not\ decrease\ the\ array\ size\ stored,\ only\ increase\ capacity.\ It\ should\ \r\n\ not\ be\ used\ to\ store\ null\ references.\r\n\ \r\n\ @author\ Jonathan\ Fieldsend\ \r\n\ @version\ 1.2\r\n
comment1.params=
comment1.target=ObjectArrayList()
comment1.text=\r\n\ Creates\ initial\ instance\ of\ an\ ObjectArrayList\ with\ no\ contents\r\n
comment10.params=
comment10.target=int\ size()
comment10.text=\r\n\ Method\ returns\ the\ total\ number\ of\ elements\ in\ the\ list\r\n\ \r\n\ @return\ number\ of\ elements\ in\ the\ list\ \r\n
comment2.params=o
comment2.target=void\ add(java.lang.Object)
comment2.text=\r\n\ Method\ adds\ the\ argument\ to\ the\ end\ of\ the\ list.\ <code>null</code>\ reference\ \r\n\ elements\ are\ not\ supported,\ so\ ensure\ that\ you\ do\ not\ add\ them.\r\n\ \r\n\ @param\ o\ Object\ instance\ to\ be\ added\r\n
comment3.params=
comment3.target=void\ resizeArray()
comment3.text=\r\n\ Method\ doubles\ the\ capacity\ of\ the\ array\r\n
comment4.params=index
comment4.target=java.lang.Object\ get(int)
comment4.text=\r\n\ Method\ returns\ the\ element\ of\ the\ list\ at\ the\ index\ provided,\ will\r\n\ return\ <code>null</code>\ if\ the\ index\ is\ invalid\r\n\ \r\n\ @param\ index\ index\ of\ element\ in\ list\ to\ be\ returned\r\n\ @return\ Object\ at\ corresponding\ index\r\n
comment5.params=index
comment5.target=boolean\ isInvalid(int)
comment5.text=\r\n\ Checks\ validity\ of\ index\ given\ current\ range,\ returns\ true\ if\ not\ valid\r\n
comment6.params=o
comment6.target=boolean\ remove(java.lang.Object)
comment6.text=\r\n\ Method\ removes\ the\ argument\ if\ it\ is\ contained\ in\ the\ list\ and\ returns\ <code>true</true>\r\n\ if\ it\ is\ successful.\ It\ will\ return\ <code>false</code>\ if\ <code>o</code>\ is\ not\ contained\ \r\n\ in\ the\ list\ and\ therefore\ not\ removed\r\n\ \r\n\ @param\ index\ index\ of\ element\ in\ list\ to\ be\ returned\r\n\ @return\ Object\ at\ corresponding\ index\ \r\n\ \r\n
comment7.params=index
comment7.target=void\ contract(int)
comment7.text=\r\n\ Method\ contracts\ effectively\ removing\ the\ index\ item.\ If\ item\ beyond\ range\ of\ \r\n\ array,\ returns\ false,\ otherwise\ returns\ true\ on\ successful\ removal\r\n
comment8.params=index
comment8.target=java.lang.Object\ remove(int)
comment8.text=\r\n\ Method\ removes\ the\ element\ of\ the\ list\ at\ the\ index\ provided,\ will\r\n\ return\ <code>null</code>\ if\ the\ index\ is\ invalid.\ Otherwise\ will\ \r\n\ return\ the\ instance\ removed\r\n\ \r\n\ @param\ index\ index\ of\ element\ in\ list\ to\ be\ returned\r\n\ @return\ Object\ at\ corresponding\ index\ \r\n\ \r\n
comment9.params=o\ index
comment9.target=boolean\ replace(java.lang.Object,\ int)
comment9.text=\r\n\ Method\ replaces\ the\ element\ of\ the\ list\ at\ the\ index\ provided,\ will\r\n\ return\ <code>false</code>\ if\ the\ index\ is\ invalid,\ otherwise\ will\ return\ true.\r\n\ \r\n\ @param\ o\ object\ to\ be\ placed\ in\ the\ list\r\n\ @param\ index\ index\ of\ element\ in\ list\ to\ be\ replaced\r\n\ @return\ true\ if\ sucessfully\ replaced,\ otherwise\ false\ if\ index\ is\r\n\ \ \ \ \ \ \ \ \ out\ of\ the\ range\ of\ stored\ data\r\n
numComments=11
